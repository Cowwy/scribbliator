{"version":3,"sources":["component/login.jsx","component/footer.jsx","component/home.jsx","component/register.jsx","component/navigationBar.jsx","App.js","serviceWorker.js","index.js"],"names":["LoginForm","Fragment","className","type","id","placeholder","value","to","Component","Footer","Homepage","RegisterForm","NavigationBar","this","props","appTitle","data-toggle","data-target","App","state","logoutNav","label","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAmDeA,E,iLA9CP,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,YAAd,SAEA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YACX,0BAAMA,UAAU,IACZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,aACX,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,GAAG,cAAcC,YAAY,YAIjF,yBAAKH,UAAU,kBACX,yBAAKA,UAAU,aACX,2BAAOC,KAAK,WAAWD,UAAU,eAAeE,GAAG,gBAAgBC,YAAY,eAIvF,yBAAKH,UAAU,kBACX,yBAAKA,UAAU,aACX,4BAAQC,KAAK,SAASD,UAAU,wBAAwBI,MAAM,SAA9D,WAIR,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMK,GAAG,KAAT,wBAMhB,yBAAKL,UAAU,mB,GAtCnBM,aCSTC,E,iLARP,OACI,4BAAQP,UAAU,4BAAlB,qE,GAHSM,aC8BNE,E,iLA3BP,OACI,kBAAC,IAAMT,SAAP,KACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,YAAd,gBAEA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YACX,uBAAGA,UAAU,uBAAb,kCACmC,6BADnC,sCAKJ,yBAAKA,UAAU,cAO3B,kBAAC,EAAD,W,GAvBOM,aCORG,E,iLANP,OACI,iD,GAHeH,aCoCZI,E,iLA9BcC,KAAKC,MAAlBC,SAER,OACI,yBAAKb,UAAU,yDACX,kBAAC,IAAD,CAASA,UAAU,eAAeK,GAAG,KAArC,KAEA,4BAAQL,UAAU,iBAAiBC,KAAK,SAASa,cAAY,WAAWC,cAAY,YAChF,0BAAMf,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BE,GAAG,WACzC,wBAAIF,UAAU,cACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWK,GAAG,KAAjC,SAGJ,wBAAIL,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWK,GAAG,UAAjC,UAGJ,wBAAIL,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWK,GAAG,aAAjC,oB,GAvBAC,aCgCbU,G,iNAzBbC,MAAQ,CACNC,UAAY,CACV,CAAEC,MAAO,QAASC,KAAM,SAAUC,UAAW,kBAAO,kBAAC,EAAD,QACpD,CAAEF,MAAO,WAAYC,KAAM,YAAaC,UAAW,kBAAO,kBAAC,EAAD,QAC1D,CAAEF,MAAO,OAAQC,KAAM,IAAKC,UAAW,kBAAO,kBAAC,EAAD,U,wEAKhD,OACE,yBAAKrB,UAAU,mBACb,kBAAC,EAAD,CAAea,SAAQ,iBAEvB,yBAAKb,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,UAAWZ,IACnC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAWvB,IAChC,kBAAC,IAAD,CAAOsB,KAAK,IAAIC,UAAWb,W,GAlBrBF,cCAEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ceef99d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass LoginForm extends Component {\r\n    render( ) {\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"col splash-screen\">\r\n                    <div className=\"scribbliator-homepage\">\r\n                        <h1 className=\"appTitle\">Login</h1>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg\"></div>\r\n                            <div className=\"col-lg-5\">\r\n                                <form className=\"\">\r\n                                    <div className=\"form-group row\">                                        \r\n                                        <div className=\"col-sm-12\">\r\n                                            <input type=\"text\" className=\"form-control\" id=\"staticEmail\" placeholder=\"Email\" />\r\n                                        </div>\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"form-group row\">\r\n                                        <div className=\"col-sm-12\">\r\n                                            <input type=\"password\" className=\"form-control\" id=\"inputPassword\" placeholder=\"Password\" />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group row\">\r\n                                        <div className=\"col-sm-12\">\r\n                                            <button type=\"submit\" className=\"w-100 btn btn-primary\" value=\"Login\">Login</button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group row\">\r\n                                        <div className=\"col-sm-12\">\r\n                                            <Link to=\"/\">Forgot Password?</Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n\r\n                            <div className=\"col-lg\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render( ) {\r\n        return(\r\n            <footer className=\"main-footer white-shadow\">\r\n                Copyright &copy; 2020 | Scribbliator | Designed By: Frankie Law\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Footer from './footer';\r\n\r\nclass Homepage extends Component {\r\n    render( ) {        \r\n        return( \r\n            <React.Fragment>\r\n                <div className=\"col splash-screen\">\r\n                    <div className=\"scribbliator-homepage\">\r\n                        <h1 className=\"appTitle\">Scribbliator</h1>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg\"></div>\r\n                            <div className=\"col-lg-8\">\r\n                                <p className=\"slogan white-shadow\">\r\n                                    100% Privacy with Web Notebook.<br/>\r\n                                    Local friendly notebook organizer\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"col-lg\"></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    \r\n                </div>\r\n\r\n                <Footer /> \r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React, { Component } from 'react';\r\n\r\nclass RegisterForm extends Component {\r\n    render( ) {\r\n        return( \r\n            <h1>Register Form</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterForm;","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n/*\r\n    THE NAVIGATION BAR CANNOT BE DYNAMICALLY GENERATE BECAUSE OF THE STYLE ISSUE.\r\n*/\r\nclass NavigationBar extends Component {\r\n    render( ) {\r\n        const { appTitle } = this.props;\r\n\r\n        return (\r\n            <div className=\"navbar fixed-top navbar-expand-lg navbar-dark bg-dark\">\r\n                <NavLink className=\"navbar-brand\" to=\"/\">S</NavLink>\r\n\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mainNav\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"mainNav\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to=\"/\">Home</NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to=\"/login\">Login</NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to=\"/register\">Register</NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport LoginForm from './component/login';\nimport Homepage from './component/home';\nimport RegisterForm from './component/register';\n\nimport NavigationBar from './component/navigationBar';\n\nimport './css/App.css';\n\n\nclass App extends Component {\n  state = { \n    logoutNav : [\n      { label: \"Login\", path: \"/login\", component: ( ) => <LoginForm /> },\n      { label: \"Register\", path: \"/register\", component: ( ) => <RegisterForm /> },\n      { label: \"Home\", path: \"/\", component: ( ) => <Homepage /> }\n    ]\n  };\n\n  render( ) {\n    return (\n      <div className=\"container-fluid\">\n        <NavigationBar appTitle={`Scribbliator`} /> \n\n        <div className=\"row h-100\">\n          <Switch>\n            <Route path=\"/register\" component={RegisterForm} />\n            <Route path=\"/login\" component={LoginForm} />\n            <Route path=\"/\" component={Homepage} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as MainRoute } from 'react-router-dom';\n\nimport './css/index.css';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <MainRoute>\n        <App />\n    </MainRoute>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}